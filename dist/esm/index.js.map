{"version":3,"file":"index.js","sources":["../../../src/hooks/useClickByClassName/useOnClickByClassName.tsx","../../../src/hooks/useElementSize/useElementSize.tsx","../../../src/hooks/useKeyCodes/useKeyCodes.tsx","../../../src/hooks/useOnPressByStyle/useOnPressByStyle.tsx","../../../src/hooks/usePreventDefault/usePreventDefault.tsx","../../../src/hooks/useScreenDimensions/useScreenDimensions.tsx","../../../src/hooks/useScrollControl/useScrollControl.tsx","../../../src/hooks/useViewSize/useViewSize.tsx","../../../src/hooks/useVisibilitySensor/useVisibilitySensor.tsx"],"sourcesContent":["import { useCallback } from 'react';\nimport { UseOnClickByStyleOptions } from '../../types/on-click-by-style-options.type';\n\ninterface UseOnClickByStyleOptionsForWeb extends UseOnClickByStyleOptions {\n    className?: string;\n    onClick?: () => void;\n}\n\n/**\n * `useOnClickByStyleForWeb` hook is designed to handle click actions on specific elements within a clickable area on the web.\n * It ensures the action is only triggered when the user interacts with an element containing a designated className.\n * \n * @param {UseOnClickByStyleOptionsForWeb} options - The options for the hook.\n * @param {string} options.className - The className to look for. Defaults to 'onclick-class'.\n * @param {() => void} options.onClick - The callback function to execute when the desired class is clicked.\n * \n * @returns {Function} A handler function to be used in a clickable component.\n */\n\n\nexport function useOnClickByClassName({ className = 'onclick-class', onClick }: UseOnClickByStyleOptionsForWeb) {\n    const handleOnClick = useCallback((event: any) => {\n        if (event.target && event.target.className && typeof event.target.className.includes === 'function') {\n            if (event.target.className.includes(className) && typeof onClick === \"function\") {\n                onClick();\n            }\n        }\n    }, [className, onClick]);\n\n    return handleOnClick;\n}\n\nexport default useOnClickByClassName;\n","import { MutableRefObject, useEffect, useRef, useState } from 'react';\nimport { LayoutType } from '../../types/screen-size.type';\n\ntype SizeType = LayoutType | DOMRect;\n\n/**\n * Represents the type of size information.\n * @typedef {LayoutType | DOMRect} SizeType\n */\n\n/**\n * Custom hook to track the size of an element.\n * @returns {[SizeType, MutableRefObject<HTMLElement | null>]} An array containing the current size and a ref to the element.\n */\n\nexport const useElementSize = (): [SizeType, MutableRefObject<HTMLElement | null>] => {\n  const ref = useRef<HTMLElement | null>(null);\n  const [size, setSize] = useState<SizeType>({\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0,\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (ref.current) {\n        const boundingRect = ref.current.getBoundingClientRect();\n        setSize({\n          width: boundingRect.width || 0,\n          height: boundingRect.height || 0,\n          x: boundingRect.x || 0,\n          y: boundingRect.y || 0,\n        });\n      }\n    };\n\n    // Initialize size\n    handleResize();\n\n    // Add the event listener\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup by removing the event listener\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return [size, ref];\n};\nexport default useElementSize;","// Hook for detecting key codes\n export function useKeyCodes() {\n    const keys = {\n      left: 37,\n      up: 38,\n      right: 39,\n      down: 40,\n      spacebar: 32,\n      pageup: 33,\n      pagedown: 34,\n      end: 35,\n      home: 36\n    };\n  \n    return keys;\n  }\n\n  export default useKeyCodes;","import { useCallback } from 'react';\nimport { UseOnClickByStyleOptions } from '../../types/on-click-by-style-options.type';\n\ninterface UseOnClickNativeOptions extends UseOnClickByStyleOptions {\n    styleName: string;\n    onPress: () => void;\n}\n\n/**\n * `useOnClickByStyleNative` hook is designed to handle press actions on specific elements within a pressable area in React Native.\n * It ensures the action is only triggered when the user interacts with an element associated with a specific stylesheet name.\n * \n * @param {UseOnClickNativeOptions} options - The options for the hook.\n * @param {string} options.styleName - The stylesheet name to look for. Defaults to 'onClickStyle'.\n * @param {() => void} options.onPress - The callback function to execute when the desired style is pressed.\n * \n * @returns {Function} A handler function to be used in a pressable component.\n */\n\n\nexport function useOnPressByStyle({ styleName = 'onClickStyle', onPress }: UseOnClickNativeOptions) {\n    const handleOnClick = useCallback((event: any) => {\n        if (event.currentTarget && event.currentTarget.style) {\n            // This is a conceptual approach. In reality, React Native doesn't have this attribute.\n            if (event.currentTarget.style.name === styleName && typeof onPress === \"function\") {\n                onPress();\n            }\n        }\n    }, [styleName, onPress]);\n\n    return handleOnClick;\n}\n\nexport default useOnPressByStyle;\n","import { useKeyCodes } from \"../useKeyCodes\";\n\n// Hook for preventing default behavior\nexport function usePreventDefault() {\n    function preventDefault(e: any) {\n      e.preventDefault();\n    }\n  \n    function preventDefaultForScrollKeys(e: any) {\n      const keys = useKeyCodes();\n      if (keys[e.keyCode as keyof typeof keys]) {\n        preventDefault(e);\n        return false;\n      }\n    }\n  \n    return { preventDefault, preventDefaultForScrollKeys };\n  }\n\n  export default usePreventDefault;","import { useEffect, useState } from \"react\"\nimport { Dimensions, ScaledSize } from \"react-native\"\n\n/**\n * `useScreenDimensions` hook provides the dimensions of the screen for React Native development.\n * It's instrumental in monitoring the current screen size, aiding in real-time screen manipulations.\n * \n * In many scenarios, it's pivotal to have an understanding of the screen's dimensions for layout,\n * design responsiveness, and dynamically rendering or positioning components based on the available space.\n * \n * @example\n * ```typescript\n * const { width, height } = useScreenDimensions();\n * ```\n * \n * @returns {Object} An object containing the `width` and `height` of the screen.\n */\n\nexport const useScreenDimensions = (): ScaledSize => {\n  const [screenSize, setScreenSize] = useState<ScaledSize>(\n    Dimensions.get(\"window\"),\n  )\n\n  useEffect(() => {\n    const onResize = (event: { window: ScaledSize; screen: ScaledSize }) => {\n      setScreenSize((prevSize) => ({\n        ...prevSize,\n        width: event.window.width,\n        height: event.window.height,\n      }))\n    }\n\n    // Subscribe to the event and store the unsubscribe function\n    const unsubscribe = Dimensions.addEventListener(\"change\", onResize)\n\n    // Use the unsubscribe function in the cleanup\n    return () => unsubscribe.remove()\n  }, [])\n\n  return screenSize\n}\n\nexport default useScreenDimensions\n","import { usePreventDefault } from \"../usePreventDefault\";\n\n\n  \n  // Hook for disabling and enabling scroll\n  export function useScrollControl(): { disableScroll: () => void; enableScroll: () => void } {\n    const { preventDefault, preventDefaultForScrollKeys } = usePreventDefault();\n  \n    function disableScroll() {\n      if (window.addEventListener) {\n        window.addEventListener('DOMMouseScroll', preventDefault, false);\n        document.addEventListener('wheel', preventDefault, { passive: false });\n        window.onwheel = preventDefault;\n       \n         \n        window.ontouchmove = preventDefault;\n        document.onkeydown = preventDefaultForScrollKeys;\n      }\n    }\n  \n    function enableScroll() {\n      if (window.removeEventListener) {\n        window.removeEventListener('DOMMouseScroll', preventDefault, false);\n        document.removeEventListener('wheel', preventDefault);\n        window.onwheel = null;\n        window.ontouchmove = null;\n        document.onkeydown = null;\n      }\n    }\n  \n    return { disableScroll, enableScroll };\n  }\n\n\n  export default useScrollControl;","import { useCallback, useState } from \"react\"\nimport { LayoutChangeEvent, LayoutRectangle } from \"react-native\"\nimport { LayoutType } from \"../../types/screen-size.type\"\n\nexport const useViewSize = (): [\n  LayoutRectangle,\n  (event: LayoutChangeEvent) => void,\n] => {\n  const [size, setSize] = useState<LayoutType>({\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0,\n  })\n\n  const onLayout = useCallback((event: LayoutChangeEvent) => {\n    const layout = event.nativeEvent.layout as  LayoutType\n    setSize(layout)\n  }, [])\n\n  return [size, onLayout]\n}\n\nexport default useViewSize\n\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { Dimensions, View } from 'react-native';\nimport { DimensionData } from '../../types/dimension-data.type';\n\n/**\n * A hook that monitors the visibility of a native React component within the viewport.\n * It tracks the dimensions of the target component and determines if it's entirely visible.\n *\n * @param onChange - Callback that fires when the visibility status of the component changes.\n * @returns A ref that should be attached to the component being observed.\n *\n * @example\n * const viewRef = useVisibilitySensor(isVisible => console.log(isVisible));\n * <View ref={viewRef} />\n */\n\n\nexport interface UseVisibilitySensorOptions<T> {\n    (onChange: (visible: boolean) => void): React.RefObject<T>\n}\n\n\nexport type UseVisibilitySensorNative = UseVisibilitySensorOptions<View>\n\nexport type UseVisibilitySensorWeb = UseVisibilitySensorOptions<any>\n\n\n\n\n export const useVisibilitySensor: UseVisibilitySensorNative = (onChange: (visible: boolean) => void) => {\n  const myView = useRef<View>(null)\n  const [lastValue, setLastValue] = useState<boolean>(false)\n  const [dimensions, setDimensions] = useState<DimensionData>({\n    rectTop: 0,\n    rectBottom: 0,\n    rectWidth: 0\n  })\n\n  const startWatching = useCallback(() => {\n    const intervalId = setInterval(() => {\n      if (!myView.current) return\n\n      myView.current.measure((_x, _y, width, height, pageX, pageY) => {\n        const newDimensions = {\n          rectTop: pageY,\n          rectBottom: pageY + height,\n          rectWidth: pageX + width\n        }\n\n        setDimensions(prevDimensions => {\n          // Check if dimensions actually changed\n          if (\n            prevDimensions.rectTop !== newDimensions.rectTop ||\n            prevDimensions.rectBottom !== newDimensions.rectBottom ||\n            prevDimensions.rectWidth !== newDimensions.rectWidth\n          ) {\n            return newDimensions\n          }\n          return prevDimensions\n        })\n      })\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n  }, [])\n\n  useEffect(() => {\n    const stopWatching = startWatching()\n    return () => stopWatching()\n  }, [startWatching])\n\n  useEffect(() => {\n    const window = Dimensions.get('window')\n    const isVisible =\n      dimensions.rectBottom !== 0 &&\n      dimensions.rectTop >= 0 &&\n      dimensions.rectBottom <= window.height &&\n      dimensions.rectWidth > 0 &&\n      dimensions.rectWidth <= window.width\n\n    if (lastValue !== isVisible) {\n      setLastValue(isVisible)\n      onChange(isVisible)\n    }\n  }, [dimensions, lastValue, onChange])\n\n  return myView as React.MutableRefObject<View>;\n}\n\nexport default useVisibilitySensor;\n"],"names":["useOnClickByClassName","className","onClick","useCallback","event","target","includes","useElementSize","ref","useRef","size","setSize","useState","width","height","x","y","useEffect","handleResize","current","boundingRect","getBoundingClientRect","window","addEventListener","removeEventListener","useKeyCodes","left","up","right","down","spacebar","pageup","pagedown","end","home","useOnPressByStyle","styleName","onPress","currentTarget","style","name","usePreventDefault","preventDefault","e","preventDefaultForScrollKeys","keyCode","useScreenDimensions","screenSize","setScreenSize","Dimensions","get","unsubscribe","prevSize","remove","useScrollControl","disableScroll","document","passive","onwheel","ontouchmove","onkeydown","enableScroll","useViewSize","layout","nativeEvent","useVisibilitySensor","onChange","myView","lastValue","setLastValue","dimensions","setDimensions","rectTop","rectBottom","rectWidth","startWatching","intervalId","setInterval","measure","_x","_y","pageX","pageY","newDimensions","prevDimensions","clearInterval","stopWatching","isVisible"],"mappings":"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"}